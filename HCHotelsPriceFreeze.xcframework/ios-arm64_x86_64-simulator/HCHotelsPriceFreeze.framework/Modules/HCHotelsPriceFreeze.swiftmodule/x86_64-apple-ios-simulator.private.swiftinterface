// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios14.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name HCHotelsPriceFreeze
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import Foundation
@_exported import HCHotelsPriceFreeze
import Network
import SafariServices
import Swift
import SwiftUI
import WebKit
import _Concurrency
import _StringProcessing
import os
@_Concurrency.MainActor(unsafe) public struct HCPriceFreezeButtonWrapper<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(roomDetails: HCHotelsPriceFreeze.HCRoomDetails, purchaseCallback: @escaping (HCHotelsPriceFreeze.HCPriceFreezePurchaseResult) -> Swift.Void, @SwiftUI.ViewBuilder button: @escaping (HCHotelsPriceFreeze.HCPriceFreezeOffer, @escaping () -> Swift.Void) -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s19HCHotelsPriceFreeze07HCPriceC13ButtonWrapperV4bodyQrvp", 0) __<Content>
}
public enum HCRefresh : Swift.String, Swift.Codable {
  case all
  case errorsOnly
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 14.2, *)
@_Concurrency.MainActor public class HCHotelsPriceFreezeSDK : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($priceFreezeOffers) @_Concurrency.MainActor public var priceFreezeOffers: [HCHotelsPriceFreeze.HCPriceFreezeOffer] {
    get
    @available(iOS 14.2, *)
    set
    @available(iOS 14.2, *)
    _modify
  }
  @_Concurrency.MainActor public var $priceFreezeOffers: Combine.Published<[HCHotelsPriceFreeze.HCPriceFreezeOffer]>.Publisher {
    get
    @available(iOS 14.2, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @_Concurrency.MainActor public static let shared: HCHotelsPriceFreeze.HCHotelsPriceFreezeSDK
  @_Concurrency.MainActor public func configure(with token: Swift.String, environmentType: HCHotelsPriceFreeze.HCEnvironmentType)
  @_Concurrency.MainActor public func updateUser(userId: Swift.String?)
  @_Concurrency.MainActor public func cacheOffers(for rooms: [HCHotelsPriceFreeze.HCRoomDetails])
  @_Concurrency.MainActor public func refreshCachedOffers(type: HCHotelsPriceFreeze.HCRefresh)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public enum HCPriceFreezePurchaseResult : Swift.Codable, Swift.Equatable {
  case purchased
  case cancelled
  case invalid
  case error(error: HCHotelsPriceFreeze.HCErrorInfo)
  public static func == (lhs: HCHotelsPriceFreeze.HCPriceFreezePurchaseResult, rhs: HCHotelsPriceFreeze.HCPriceFreezePurchaseResult) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum HCEnvironmentType : Swift.String {
  case production
  case staging
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct HCPriceFreezeOffer : Swift.Codable {
  public var state: HCHotelsPriceFreeze.HCPriceFreezeOfferState
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum HCPriceFreezeOfferState : Swift.Codable, Swift.Equatable {
  case loading
  case available
  case unavailable
  case error(error: HCHotelsPriceFreeze.HCErrorInfo)
  public static func == (lhs: HCHotelsPriceFreeze.HCPriceFreezeOfferState, rhs: HCHotelsPriceFreeze.HCPriceFreezeOfferState) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct HCErrorInfo : Swift.Error, Swift.Codable {
  public let message: Swift.String
  public let code: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct HCRoomDetails : Swift.Codable, Swift.Equatable, Swift.Hashable {
  public static func == (a: HCHotelsPriceFreeze.HCRoomDetails, b: HCHotelsPriceFreeze.HCRoomDetails) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
extension HCHotelsPriceFreeze.HCRefresh : Swift.Equatable {}
extension HCHotelsPriceFreeze.HCRefresh : Swift.Hashable {}
extension HCHotelsPriceFreeze.HCRefresh : Swift.RawRepresentable {}
@available(iOS 14.2, *)
extension HCHotelsPriceFreeze.HCHotelsPriceFreezeSDK : Swift.Sendable {}
extension HCHotelsPriceFreeze.HCEnvironmentType : Swift.Equatable {}
extension HCHotelsPriceFreeze.HCEnvironmentType : Swift.Hashable {}
extension HCHotelsPriceFreeze.HCEnvironmentType : Swift.RawRepresentable {}
